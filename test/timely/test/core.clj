(ns timely.test.core
  (:use [timely.core])
  (:use [clojure.test])
  (:require [clj-time.core :as dates])
  (:require [clj-time.coerce :as dates-coerce]))

(deftest test-schedule-to-cron
  (is (= "0 0 * * *"     (schedule-to-cron (daily))))
  (is (= "20 9 * * *"    (schedule-to-cron (daily (at (hour 9) (minute 20))))))
  (is (= "0 0 * 4 *"     (schedule-to-cron (daily (on (month 4))))))
  (is (= "20 9 * 4 *"    (schedule-to-cron (daily (at (hour 9) (minute 20)) (on (month :april))))))
  (is (= "20 9 3 * *"    (schedule-to-cron (monthly (at (hour 9) (minute 20) (day 3))))))
  (is (= "0 * * 4-9 1"   (schedule-to-cron (hourly (on (day-of-week :mon) (month (in-range 4 9)))))))
  (is (= "0 * * 4-9 1,5" (schedule-to-cron (hourly (on (day-of-week :mon :fri) (month (in-range :april :september)))))))
  (is (= "0 8,17 * * *"  (schedule-to-cron (daily (at (hour 8 17))))))
  (is (= "20 9 * * 1,3"  (schedule-to-cron (on-days-of-week [:mon :wed] (at (hour 9) (minute 20))))))
  (is (= "*/2 * * * *"   (schedule-to-cron (every :minute 2))))
  (is (= "*/2 * */2 * *" (schedule-to-cron (every :minute 2 (per :day 2)))))
  (is (= "1 2 3 4 *"     (schedule-to-cron (create-schedule 1 2 3 4 all))))
  (is (= "* * * * *"     (schedule-to-cron (each-minute (start-time (* (dates-coerce/to-long (dates/now)) 2))))))
  (is (= "* * * * *"     (schedule-to-cron (each-minute (end-time 0)))))
  (is (= "* * * * *"     (schedule-to-cron (each-minute (start-time 0) (end-time (* (dates-coerce/to-long (dates/now)) 2))))))
  (is (= "* * * * *"     (schedule-to-cron (each-minute
                                            (start-time (to-utc-timestamp (dates/date-time 2012 5 15 11 42)))
                                            (end-time (to-utc-timestamp (dates/date-time 2012 5 15 11 43))))))))
